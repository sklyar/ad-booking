// Code generated by mockery v2.42.1. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/sklyar/ad-booking/backend/internal/entity"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/sklyar/ad-booking/backend/internal/repository"
)

// ContactPersonRepository is an autogenerated mock type for the ContactPerson type
type ContactPersonRepository struct {
	mock.Mock
}

type ContactPersonRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ContactPersonRepository) EXPECT() *ContactPersonRepository_Expecter {
	return &ContactPersonRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, person
func (_m *ContactPersonRepository) Create(ctx context.Context, person *entity.ContactPerson) error {
	ret := _m.Called(ctx, person)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ContactPerson) error); ok {
		r0 = rf(ctx, person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContactPersonRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ContactPersonRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - person *entity.ContactPerson
func (_e *ContactPersonRepository_Expecter) Create(ctx interface{}, person interface{}) *ContactPersonRepository_Create_Call {
	return &ContactPersonRepository_Create_Call{Call: _e.mock.On("Create", ctx, person)}
}

func (_c *ContactPersonRepository_Create_Call) Run(run func(ctx context.Context, person *entity.ContactPerson)) *ContactPersonRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ContactPerson))
	})
	return _c
}

func (_c *ContactPersonRepository_Create_Call) Return(_a0 error) *ContactPersonRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContactPersonRepository_Create_Call) RunAndReturn(run func(context.Context, *entity.ContactPerson) error) *ContactPersonRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, person
func (_m *ContactPersonRepository) Delete(ctx context.Context, person *entity.ContactPerson) error {
	ret := _m.Called(ctx, person)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ContactPerson) error); ok {
		r0 = rf(ctx, person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContactPersonRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ContactPersonRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - person *entity.ContactPerson
func (_e *ContactPersonRepository_Expecter) Delete(ctx interface{}, person interface{}) *ContactPersonRepository_Delete_Call {
	return &ContactPersonRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, person)}
}

func (_c *ContactPersonRepository_Delete_Call) Run(run func(ctx context.Context, person *entity.ContactPerson)) *ContactPersonRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ContactPerson))
	})
	return _c
}

func (_c *ContactPersonRepository_Delete_Call) Return(_a0 error) *ContactPersonRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContactPersonRepository_Delete_Call) RunAndReturn(run func(context.Context, *entity.ContactPerson) error) *ContactPersonRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Filter provides a mock function with given fields: ctx, filter
func (_m *ContactPersonRepository) Filter(ctx context.Context, filter repository.ContactPersonFilter) ([]entity.ContactPerson, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 []entity.ContactPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ContactPersonFilter) ([]entity.ContactPerson, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ContactPersonFilter) []entity.ContactPerson); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ContactPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ContactPersonFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContactPersonRepository_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type ContactPersonRepository_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter repository.ContactPersonFilter
func (_e *ContactPersonRepository_Expecter) Filter(ctx interface{}, filter interface{}) *ContactPersonRepository_Filter_Call {
	return &ContactPersonRepository_Filter_Call{Call: _e.mock.On("Filter", ctx, filter)}
}

func (_c *ContactPersonRepository_Filter_Call) Run(run func(ctx context.Context, filter repository.ContactPersonFilter)) *ContactPersonRepository_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ContactPersonFilter))
	})
	return _c
}

func (_c *ContactPersonRepository_Filter_Call) Return(_a0 []entity.ContactPerson, _a1 error) *ContactPersonRepository_Filter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContactPersonRepository_Filter_Call) RunAndReturn(run func(context.Context, repository.ContactPersonFilter) ([]entity.ContactPerson, error)) *ContactPersonRepository_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *ContactPersonRepository) Get(ctx context.Context, id uint64) (*entity.ContactPerson, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.ContactPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*entity.ContactPerson, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *entity.ContactPerson); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ContactPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContactPersonRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ContactPersonRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *ContactPersonRepository_Expecter) Get(ctx interface{}, id interface{}) *ContactPersonRepository_Get_Call {
	return &ContactPersonRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *ContactPersonRepository_Get_Call) Run(run func(ctx context.Context, id uint64)) *ContactPersonRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *ContactPersonRepository_Get_Call) Return(_a0 *entity.ContactPerson, _a1 error) *ContactPersonRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContactPersonRepository_Get_Call) RunAndReturn(run func(context.Context, uint64) (*entity.ContactPerson, error)) *ContactPersonRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, person
func (_m *ContactPersonRepository) Update(ctx context.Context, person *entity.ContactPerson) error {
	ret := _m.Called(ctx, person)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ContactPerson) error); ok {
		r0 = rf(ctx, person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContactPersonRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ContactPersonRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - person *entity.ContactPerson
func (_e *ContactPersonRepository_Expecter) Update(ctx interface{}, person interface{}) *ContactPersonRepository_Update_Call {
	return &ContactPersonRepository_Update_Call{Call: _e.mock.On("Update", ctx, person)}
}

func (_c *ContactPersonRepository_Update_Call) Run(run func(ctx context.Context, person *entity.ContactPerson)) *ContactPersonRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ContactPerson))
	})
	return _c
}

func (_c *ContactPersonRepository_Update_Call) Return(_a0 error) *ContactPersonRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContactPersonRepository_Update_Call) RunAndReturn(run func(context.Context, *entity.ContactPerson) error) *ContactPersonRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewContactPersonRepository creates a new instance of ContactPersonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContactPersonRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContactPersonRepository {
	mock := &ContactPersonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
