// Code generated by mockery v2.42.1. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/sklyar/ad-booking/backend/internal/entity"
	mock "github.com/stretchr/testify/mock"

	service "github.com/sklyar/ad-booking/backend/internal/service"
)

// PersonService is an autogenerated mock type for the Person type
type PersonService struct {
	mock.Mock
}

type PersonService_Expecter struct {
	mock *mock.Mock
}

func (_m *PersonService) EXPECT() *PersonService_Expecter {
	return &PersonService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data
func (_m *PersonService) Create(ctx context.Context, data service.PersonCreate) (*entity.ContactPerson, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.ContactPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.PersonCreate) (*entity.ContactPerson, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.PersonCreate) *entity.ContactPerson); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ContactPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.PersonCreate) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersonService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PersonService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data service.PersonCreate
func (_e *PersonService_Expecter) Create(ctx interface{}, data interface{}) *PersonService_Create_Call {
	return &PersonService_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *PersonService_Create_Call) Run(run func(ctx context.Context, data service.PersonCreate)) *PersonService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.PersonCreate))
	})
	return _c
}

func (_c *PersonService_Create_Call) Return(_a0 *entity.ContactPerson, _a1 error) *PersonService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PersonService_Create_Call) RunAndReturn(run func(context.Context, service.PersonCreate) (*entity.ContactPerson, error)) *PersonService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PersonService) Delete(ctx context.Context, id uint64) (*entity.ContactPerson, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *entity.ContactPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*entity.ContactPerson, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *entity.ContactPerson); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ContactPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersonService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PersonService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *PersonService_Expecter) Delete(ctx interface{}, id interface{}) *PersonService_Delete_Call {
	return &PersonService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *PersonService_Delete_Call) Run(run func(ctx context.Context, id uint64)) *PersonService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *PersonService_Delete_Call) Return(_a0 *entity.ContactPerson, _a1 error) *PersonService_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PersonService_Delete_Call) RunAndReturn(run func(context.Context, uint64) (*entity.ContactPerson, error)) *PersonService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Filter provides a mock function with given fields: ctx, filter
func (_m *PersonService) Filter(ctx context.Context, filter service.PersonFilter) ([]entity.ContactPerson, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 []entity.ContactPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.PersonFilter) ([]entity.ContactPerson, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.PersonFilter) []entity.ContactPerson); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ContactPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.PersonFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersonService_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type PersonService_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter service.PersonFilter
func (_e *PersonService_Expecter) Filter(ctx interface{}, filter interface{}) *PersonService_Filter_Call {
	return &PersonService_Filter_Call{Call: _e.mock.On("Filter", ctx, filter)}
}

func (_c *PersonService_Filter_Call) Run(run func(ctx context.Context, filter service.PersonFilter)) *PersonService_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.PersonFilter))
	})
	return _c
}

func (_c *PersonService_Filter_Call) Return(_a0 []entity.ContactPerson, _a1 error) *PersonService_Filter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PersonService_Filter_Call) RunAndReturn(run func(context.Context, service.PersonFilter) ([]entity.ContactPerson, error)) *PersonService_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *PersonService) Get(ctx context.Context, id uint64) (*entity.ContactPerson, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.ContactPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*entity.ContactPerson, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *entity.ContactPerson); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ContactPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersonService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PersonService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *PersonService_Expecter) Get(ctx interface{}, id interface{}) *PersonService_Get_Call {
	return &PersonService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *PersonService_Get_Call) Run(run func(ctx context.Context, id uint64)) *PersonService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *PersonService_Get_Call) Return(_a0 *entity.ContactPerson, _a1 error) *PersonService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PersonService_Get_Call) RunAndReturn(run func(context.Context, uint64) (*entity.ContactPerson, error)) *PersonService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data
func (_m *PersonService) Update(ctx context.Context, data service.PersonUpdate) (*entity.ContactPerson, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.ContactPerson
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.PersonUpdate) (*entity.ContactPerson, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.PersonUpdate) *entity.ContactPerson); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ContactPerson)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.PersonUpdate) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersonService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PersonService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data service.PersonUpdate
func (_e *PersonService_Expecter) Update(ctx interface{}, data interface{}) *PersonService_Update_Call {
	return &PersonService_Update_Call{Call: _e.mock.On("Update", ctx, data)}
}

func (_c *PersonService_Update_Call) Run(run func(ctx context.Context, data service.PersonUpdate)) *PersonService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.PersonUpdate))
	})
	return _c
}

func (_c *PersonService_Update_Call) Return(_a0 *entity.ContactPerson, _a1 error) *PersonService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PersonService_Update_Call) RunAndReturn(run func(context.Context, service.PersonUpdate) (*entity.ContactPerson, error)) *PersonService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewPersonService creates a new instance of PersonService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonService {
	mock := &PersonService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
